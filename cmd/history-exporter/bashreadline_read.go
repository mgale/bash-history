// This program demonstrates how to attach an eBPF program to a uretprobe.
// The program will be attached to the 'readline' symbol in the binary '/bin/bash' and print out
// the line which 'readline' functions returns to the caller.

//go:build amd64

package main

import (
	"bytes"
	"context"
	"encoding/binary"
	"errors"
	"fmt"
	"log"
	"os"
	"os/user"
	"strings"

	"github.com/cilium/ebpf/link"
	"github.com/cilium/ebpf/perf"
	"github.com/cilium/ebpf/rlimit"
	"github.com/mgale/bash-history.git/internal/defaults"
	"github.com/mgale/bash-history.git/internal/events"
	"golang.org/x/sys/unix"
)

// $BPF_CLANG and $BPF_CFLAGS are set by the Makefile.
//go:generate go run github.com/cilium/ebpf/cmd/bpf2go -cc $BPF_CLANG -cflags $BPF_CFLAGS -target amd64 -type event bpf uretprobe.c -- -I../../headers

const (
	// The path to the ELF binary containing the function to trace.
	// On some distributions, the 'readline' function is provided by a
	// dynamically-linked library, so the path of the library will need
	// to be specified instead, e.g. /usr/lib/libreadline.so.8.
	// Use `ldd /bin/bash` to find these paths.
	binPath = "/bin/bash"
	symbol  = "readline"
)

func readEvents(ctx context.Context, streamEventsChannel chan events.ReadEvent, verbose bool) error {
	if ctx.Err() != nil {
		return ctx.Err()
	}

	// Allow the current process to lock memory for eBPF resources.
	if err := rlimit.RemoveMemlock(); err != nil {
		return err
	}

	// Load pre-compiled programs and maps into the kernel.
	objs := bpfObjects{}
	if err := loadBpfObjects(&objs, nil); err != nil {
		return err
	}
	defer objs.Close()

	// Open an ELF binary and read its symbols.
	ex, err := link.OpenExecutable(binPath)
	if err != nil {
		return err
	}

	// Open a Uretprobe at the exit point of the symbol and attach
	// the pre-compiled eBPF program to it.
	up, err := ex.Uretprobe(symbol, objs.UretprobeBashReadline, nil)
	if err != nil {
		return err
	}
	defer up.Close()

	log.Println(up.Info())

	// Open a perf event reader from userspace on the PERF_EVENT_ARRAY map
	// described in the eBPF C program.
	rd, err := perf.NewReader(objs.Events, os.Getpagesize())
	if err != nil {
		return err
	}
	defer rd.Close()

	go func() {
		// Wait for a signal and close the perf reader,
		// which will interrupt rd.Read() and make the program exit.
		<-ctx.Done()
		log.Println("Done signal received, exiting readEvents.")

		if err := rd.Close(); err != nil {
			log.Fatalf("closing perf event reader: %s", err)
		}
	}()

	log.Printf("Listening for events..")

	// bpfEvent is generated by bpf2go.
	var event bpfEvent
	for {
		record, err := rd.Read()
		if err != nil {
			if errors.Is(err, perf.ErrClosed) {
				return nil
			}
			log.Printf("reading from perf event reader: %s", err)
			return err
		}

		if record.LostSamples != 0 {
			log.Printf("perf event ring buffer full, dropped %d samples", record.LostSamples)
			continue
		}

		// Parse the perf event entry into a bpfEvent structure.
		if err := binary.Read(bytes.NewBuffer(record.RawSample), binary.LittleEndian, &event); err != nil {
			log.Printf("parsing perf event: %s", err)
			continue
		}

		if verbose {
			log.Printf("%s:%s pid:%d, user:%d return value: %s", binPath, symbol, event.Pid, event.UserID, unix.ByteSliceToString(event.Line[:]))
		}

		username := "unknown"
		user, err := user.LookupId(fmt.Sprint(event.UserID))
		if err != nil {
			log.Printf("user.LookupId(%d): %s", event.UserID, err)
		} else {
			username = user.Username
		}

		re := events.ReadEvent{
			Pid:      event.Pid,
			Username: username,
			Line:     strings.TrimSpace(unix.ByteSliceToString(event.Line[:])),
		}

		eventSize := len(re.Line)
		log.Printf("event size: %d", len(re.Line))

		if eventSize == 0 {
			// empty command, so we'll just drop it
			log.Printf("dropping empty command")
			continue
		}

		if eventSize > (defaults.CommandMaxLen - 1) {
			// odds are the command was truncated, so we'll just drop it
			log.Printf("dropping command due to length: %d", len(re.Line))
			continue
		}

		// Don't block on slow or no consumer, this is useful for local debuging or if NATS is down.
		select {
		case streamEventsChannel <- re:
		default:
			log.Println("dropped event due to slow or no consumer")
		}

		if ctx.Err() != nil {
			return ctx.Err()
		}
	}
}
